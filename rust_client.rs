use tokio_tungstenite::connect_async;
use tokio::net::TcpStream;
use tokio::io::{AsyncReadExt, AsyncWriteExt};
use url::Url;
use std::env;

// AUTO-GENERATED BY CHATGPT

#[tokio::main]
async fn main() {
    let server_url = "ws://localhost:8080/ws";
    let api_key = "your_generated_token";

    let url = Url::parse(server_url).expect("Invalid WebSocket URL");
    let (ws_stream, _) = connect_async(url)
        .await
        .expect("Failed to connect");

    println!("Connected to {}", server_url);

    let (mut write, mut read) = ws_stream.split();

    // Send an authentication request
    let auth_message = format!(r#"{{"type": "auth", "token": "{}"}}"#, api_key);
    write.send(auth_message.into()).await.expect("Failed to send message");

    // Listen for responses
    while let Some(msg) = read.next().await {
        match msg {
            Ok(message) => println!("Received: {:?}", message),
            Err(e) => eprintln!("Error: {:?}", e),
        }
    }
}
